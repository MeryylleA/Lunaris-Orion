version: '3.8'

services:
  # Serviço principal da API
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MODEL_DEVICE=${MODEL_DEVICE}
      - MODEL_PRECISION=${MODEL_PRECISION}
      - MODEL_MAX_BATCH_SIZE=${MODEL_MAX_BATCH_SIZE}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS}
    volumes:
      - ./models:/app/models
      - ./cache:/app/cache
    depends_on:
      - db
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Bot do Discord
  discord_bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - LUNARIS_API_URL=http://api:8000
      - LUNARIS_API_KEY=${LUNARIS_API_KEY}
    depends_on:
      - api

  # Banco de dados PostgreSQL
  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-lunaris}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lunaris}
      - POSTGRES_DB=${POSTGRES_DB:-lunaris}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis para cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Nginx para proxy reverso
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - grafana

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: 